---
# === DB LAYER ===
- name: Configure MySQL on db
  hosts: db
  become: yes
  vars:
    default_db_name: "myappdb"
    default_db_user: "myappuser"
    default_db_password: "myapppass"
    app_ip: "192.168.56.10"
    mysql_socket: /var/run/mysqld/mysqld.sock
  tasks:
    - name: Install MySQL server & driver
      apt:
        name:
          - mysql-server
          - python3-pymysql
        state: present
        update_cache: yes

    - name: Ensure MySQL running
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Listen on all interfaces
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
      notify: Restart MySQL

    - name: Create application database
      community.mysql.mysql_db:
        name: "{{ db_name | default(default_db_name) }}"
        state: present
        login_unix_socket: "{{ mysql_socket }}"

    - name: Create application user (restricted to app IP)
      community.mysql.mysql_user:
        name: "{{ db_user | default(default_db_user)}}"
        host: "{{ app_ip }}"
        password: "{{ db_password | default(default_db_password)}}"
        priv: "{{ (db_name  | default(default_db_name)) }}.*:ALL"
        state: present
        login_unix_socket: "{{ mysql_socket }}"

  handlers:
    - name: Restart MySQL
      service:
        name: mysql
        state: restarted


# === APP LAYER ===
- name: Configure application server
  hosts: app
  become: yes
  vars:
    default_app_user: "myapp"
    default_app_dir: "/var/www/myapp"
    default_db_host: "192.168.56.11"
    default_db_name: "myappdb"
    default_db_user: "myappuser"
    default_db_password: "myapppass"
  tasks:
    - name: Install base packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - nginx
        state: present
        update_cache: yes

    - name: Ensure application user
      user:
        name: "{{ app_user | default(default_app_user)}}"
        system: yes
        create_home: no

    - name: Create application directory
      file:
        path: "{{ app_dir | default(default_app_dir)}}"
        state: directory
        owner: "{{ app_user | default(default_app_user) }}"
        group: "{{ app_user | default(default_app_user) }}"
        mode: "0755"

    - name: Install Flask + MySQL connector
      pip:
        name:
          - flask
          - mysql-connector-python
        executable: pip3

    - name: Drop sample Flask app
      copy:
        dest: "{{ app_dir | default(default_app_dir)}}/app.py"
        owner: "{{ app_user | default(default_app_user)}}"
        group: "{{ app_user | default(default_app_user)}}"
        mode: "0644"
        content: |
          import mysql.connector
          from flask import Flask
          app = Flask(__name__)
          
          def db_ok():
              try:
                  conn = mysql.connector.connect(
                      host="{{ db_host | default(default_db_host) }}",
                      user="{{ db_user | default(default_db_user) }}",
                      password="{{ db_password | default(default_db_password) }}",
                      database="{{ db_name | default(default_db_name) }}",
                      connection_timeout=2
                  )
                  cur = conn.cursor()
                  cur.execute("SELECT 1")
                  cur.fetchone()
                  cur.close()
                  conn.close()
                  return True
              except Exception as e:
                  return False

          @app.route("/")
          def index():
              return ("Hello from App VM! DB at {{ db_host | default(default_db_host) }} "
              + ("(DB OK)" if db_ok() else "(DB ERROR)"))

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=5000)

    - name: Create systemd service for myapp
      copy:
        dest: /etc/systemd/system/myapp.service
        mode: "0644"
        content: |
          [Unit]
          Description=MyApp Flask Service
          After=network.target

          [Service]
          User={{ app_user | default(default_app_user)}}
          WorkingDirectory={{ app_dir | default(default_app_dir)}}
          ExecStart=/usr/bin/python3 {{ app_dir | default(default_app_dir) }}/app.py
          Restart=always
          RestartSec=3

          [Install]
          WantedBy=multi-user.target
      notify: Restart myapp

  handlers:
    - name: Restart myapp
      systemd:
        name: myapp
        state: restarted
        enabled: yes


# === (Optional) LB reverse proxy ===
- name: Configure Nginx on lb as reverse proxy to app:5000
  hosts: lb
  become: yes
  connection: local
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Configure site
      copy:
        dest: /etc/nginx/sites-available/myapp
        mode: "0644"
        content: |
          server {
            listen 80;
            location / {
              proxy_pass http://192.168.56.10:5000;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
            }
          }
    - name: Enable site
      file:
        src: /etc/nginx/sites-available/myapp
        dest: /etc/nginx/sites-enabled/myapp
        state: link
        force: yes

    - name: Remove default site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
        enabled: yes
