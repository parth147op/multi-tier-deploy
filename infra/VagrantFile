Vagrant.configure("2") do |config|
  # Global sanity
  config.vm.box = "ubuntu/focal64"
  config.vm.boot_timeout = 600
  config.ssh.insert_key = true   # keep default vagrant key (stable)

  # ---------- APP ----------

  config.vm.define "app" do |app|
    app.vm.hostname = "app"
    app.vm.network "private_network", ip: "192.168.56.10"
    app.vm.provider "virtualbox" do |vb|
      vb.name = "app"
      vb.memory = 1024
      vb.cpus   = 1
    end
    # Needed for Ansible
    app.vm.provision "shell", inline: <<-'SHELL'
      set -e
      sudo apt-get update -y
      sudo apt-get install -y python3 python3-apt acl
    SHELL
  end

  # ---------- DB ----------
  config.vm.define "db" do |db|
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.56.11"
    db.vm.provider "virtualbox" do |vb|
      vb.name = "db"
      vb.memory = 1024
      vb.cpus   = 1
    end
    # Needed for Ansible
    db.vm.provision "shell", inline: <<-'SHELL'
      set -e
      sudo apt-get update -y
      sudo apt-get install -y python3 python3-apt acl
    SHELL
  end

  # ---------- LB (Ansible control node) ----------
  config.vm.define "lb" do |lb|
    lb.vm.hostname = "lb"
    lb.vm.network "private_network", ip: "192.168.56.12"
    lb.vm.provider "virtualbox" do |vb|
      vb.name = "lb"
      vb.memory = 1536
      vb.cpus   = 2
    end

    # Prep control node on every provision
    lb.vm.provision "shell", run: "always", inline: <<-'SHELL'
      set -e
      # Ensure hostname sticks
      sudo hostnamectl set-hostname lb || true

      # Install/refresh Ansible (PPA for newer version)
      sudo apt-get update -y
      sudo apt-get install -y software-properties-common
      sudo add-apt-repository --yes --update ppa:ansible/ansible || true
      sudo apt-get install -y ansible

      # Inventory for our 3 nodes
      cat >/home/vagrant/inventory.ini <<'EOF'
[app]
192.168.56.10

[db]
192.168.56.11

[all:vars]
ansible_user=vagrant
ansible_python_interpreter=/usr/bin/python3
EOF
      chown vagrant:vagrant /home/vagrant/inventory.ini

      # Ensure lb has an SSH key to reach app/db
      su - vagrant -c 'test -f ~/.ssh/id_ed25519 || ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519'

      # Reuse Vagrant-generated guest keys (synced under /vagrant)
      APP_KEY="/vagrant/.vagrant/machines/app/virtualbox/private_key"
      DB_KEY="/vagrant/.vagrant/machines/db/virtualbox/private_key"
      if [ -f "$APP_KEY" ] && [ -f "$DB_KEY" ]; then
        chmod 600 "$APP_KEY" "$DB_KEY"
        PUBKEY=$(su - vagrant -c 'cat ~/.ssh/id_ed25519.pub')

        # Authorize lb's pubkey on APP
        ssh -i "$APP_KEY" -o StrictHostKeyChecking=no vagrant@192.168.56.10 \
          "mkdir -p ~/.ssh && (grep -q \"$PUBKEY\" ~/.ssh/authorized_keys || echo \"$PUBKEY\" >> ~/.ssh/authorized_keys)" || true

        # Authorize lb's pubkey on DB
        ssh -i "$DB_KEY"  -o StrictHostKeyChecking=no vagrant@192.168.56.11 \
          "mkdir -p ~/.ssh && (grep -q \"$PUBKEY\" ~/.ssh/authorized_keys || echo \"$PUBKEY\" >> ~/.ssh/authorized_keys)" || true
      fi

      # Make sure ansible has the mysql collection
      sudo -H -u vagrant bash -lc 'ansible-galaxy collection install -p ~/.ansible/collections community.mysql || true'
    SHELL

    # Run your site playbook from inside lb against the whole inventory
    lb.vm.provision "ansible_local" do |ans|
      ans.playbook       = "/vagrant/ansible/site.yml"      # path inside guest
      ans.inventory_path = "/home/vagrant/inventory.ini"
      ans.become         = true
      ans.limit          = "all"                            # run for all hosts
      ans.extra_vars     = {
        app_user: "myapp",
        app_dir: "/var/www/myapp",
        db_host: "192.168.56.11",
        db_name: "myappdb",
        db_user: "myappuser",
        db_password: "myapppass"
      }
    end
  end
end
